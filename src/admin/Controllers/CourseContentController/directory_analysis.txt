מבנה התיקייה:
CourseContentController
  ContentController.ts
  CourseController.ts
  CourseUserController.ts
  LessonController.ts
  SectionController.ts

תוכן הקבצים:

==================================================
Contents of C:\Users\eytan\Desktop\hebrewclubweb\server\src\admin\Controllers\CourseContentController\ContentController.ts:
==================================================
import { Request, Response } from 'express';
import mongoose from 'mongoose';
import Lesson from '../../../models/Lesson';
import { ContentItemModel } from '../../../models/Lesson';
import { ContentItem as ContentItemType, ApiResponse } from '../../../types/models';

const LOG_PREFIX = '[CourseContentController]';

export const addContent = async (req: Request, res: Response) => {
  const lessonId = req.params.lessonId;
  console.log(`${LOG_PREFIX} Adding content to lesson with ID:`, lessonId);
  
  try {
    const lesson = await Lesson.findById(lessonId);
    if (!lesson) {
      return res.status(404).json({ success: false, error: 'Lesson not found' } as ApiResponse<null>);
    }

    const contentData: ContentItemType = req.body;
    const newContentItem = new ContentItemModel({ ...contentData, lessonId });
    await newContentItem.save();
    
    await Lesson.findByIdAndUpdate(lessonId, { $push: { contentItems: newContentItem._id } });

    console.log(`${LOG_PREFIX} Content added successfully to lesson:`, lessonId);
    res.status(201).json({ 
      success: true, 
      data: newContentItem,
      message: 'Content added to lesson successfully'
    } as ApiResponse<ContentItemType>);
  } catch (error) {
    console.error(`${LOG_PREFIX} Error adding content to lesson:`, error);
    res.status(500).json({ success: false, error: 'Server error while adding content to lesson' } as ApiResponse<null>);
  }
};

export const updateContent = async (req: Request, res: Response) => {
  const contentId = req.params.contentId;
  console.log(`${LOG_PREFIX} Updating content with ID:`, contentId);
  console.log(`${LOG_PREFIX} Update data:`, req.body);

  if (!contentId) {
    console.error(`${LOG_PREFIX} Content ID is undefined`);
    return res.status(400).json({ success: false, error: 'Content ID is required' } as ApiResponse<null>);
  }

  try {
    const updateData: Partial<ContentItemType> = req.body;
    const updatedContentItem = await ContentItemModel.findByIdAndUpdate(contentId, updateData, { new: true });

    if (!updatedContentItem) {
      console.warn(`${LOG_PREFIX} Content item not found for ID:`, contentId);
      return res.status(404).json({ success: false, error: 'Content item not found' } as ApiResponse<null>);
    }

    console.log(`${LOG_PREFIX} Successfully updated content item with ID:`, contentId);
    res.json({ 
      success: true, 
      data: updatedContentItem
    } as ApiResponse<ContentItemType>);
  } catch (error) {
    console.error(`${LOG_PREFIX} Error updating content item:`, error);
    res.status(500).json({ success: false, error: 'Server error while updating content item' } as ApiResponse<null>);
  }
};

export const deleteContent = async (req: Request, res: Response) => {
  const contentId = req.params.contentId;
  console.log(`${LOG_PREFIX} Deleting content with ID:`, contentId);

  try {
    const deletedContentItem = await ContentItemModel.findByIdAndDelete(contentId);
    if (!deletedContentItem) {
      console.warn(`${LOG_PREFIX} Content item not found for deletion, ID:`, contentId);
      return res.status(404).json({ success: false, error: 'Content item not found' } as ApiResponse<null>);
    }

    await Lesson.findByIdAndUpdate(
      deletedContentItem.lessonId,
      { $pull: { contentItems: contentId } }
    );

    console.log(`${LOG_PREFIX} Successfully deleted content item with ID:`, contentId);
    res.json({ success: true, message: 'Content item deleted successfully' } as ApiResponse<null>);
  } catch (error) {
    console.error(`${LOG_PREFIX} Error deleting content item:`, error);
    res.status(500).json({ success: false, error: 'Server error while deleting content item' } as ApiResponse<null>);
  }
};

export const getContentItems = async (req: Request, res: Response) => {
  console.log(`${LOG_PREFIX} Received request for content items:`, req.query);
  
  try {
    let contentItems;
    
    if (req.params.lessonId) {
      // If lessonId is provided, fetch content items for that lesson
      const lessonId = req.params.lessonId;
      console.log(`${LOG_PREFIX} Fetching content items for lesson:`, lessonId);
      contentItems = await ContentItemModel.find({ lessonId });
    } else if (req.query.ids) {
      // If ids are provided in query, fetch those specific content items
      let contentItemIds: string[] = Array.isArray(req.query.ids) 
        ? req.query.ids as string[] 
        : (req.query.ids as string).split(',');
      
      console.log(`${LOG_PREFIX} Fetching content items for IDs:`, contentItemIds);
      contentItems = await ContentItemModel.find({ _id: { $in: contentItemIds } });
    } else {
      // If no specific params or query, fetch all content items
      console.log(`${LOG_PREFIX} Fetching all content items`);
      contentItems = await ContentItemModel.find();
    }

    console.log(`${LOG_PREFIX} Successfully fetched content items`);
    res.json({ 
      success: true, 
      data: contentItems
    } as ApiResponse<ContentItemType[]>);
  } catch (error) {
    console.error(`${LOG_PREFIX} Error fetching content items:`, error);
    res.status(500).json({ success: false, error: 'Server error while fetching content items' } as ApiResponse<null>);
  }
};

export const getCourseContent = async (req: Request, res: Response) => {
  const courseId = req.params.courseId;
  console.log(`${LOG_PREFIX} Fetching content for course:`, courseId);

  try {
    // Here you would typically fetch the course structure, including sections and lessons
    // This is a placeholder implementation and should be adjusted based on your data model
    const courseContent = await Lesson.find({ courseId }).populate('contentItems');
    
    console.log(`${LOG_PREFIX} Successfully fetched course content for course:`, courseId);
    res.json({ 
      success: true, 
      data: courseContent
    } as ApiResponse<any>); // Replace 'any' with your specific course content type
  } catch (error) {
    console.error(`${LOG_PREFIX} Error fetching course content:`, error);
    res.status(500).json({ success: false, error: 'Server error while fetching course content' } as ApiResponse<null>);
  }
};

// You can add more functions here as needed, following the same pattern

==================================================
Contents of C:\Users\eytan\Desktop\hebrewclubweb\server\src\admin\Controllers\CourseContentController\CourseController.ts:
==================================================
import { Request, Response } from 'express';
import Course from '../../../models/Course';
import User from '../../../models/User';
import { Course as CourseType, CourseData, User as UserType, ApiResponse, PaginatedResponse } from '../../../types/models';
import mongoose from 'mongoose';

export const getCourseContent = async (req: Request, res: Response) => {
  try {
    const _id = new mongoose.Types.ObjectId(req.params._id);

    const course = await Course.findById(_id)
      .populate({
        path: 'sections',
        populate: {
          path: 'lessons',
          populate: {
            path: 'contentItems'
          }
        }
      })
      .lean();

    if (!course) {
      return res.status(404).json({ 
        success: false, 
        error: 'Course not found' 
      } as ApiResponse<null>);
    }

    res.json({ 
      success: true, 
      data: course 
    } as ApiResponse<typeof course>);
  } catch (error) {
    console.error('Error fetching course content:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Server error while fetching course content' 
    } as ApiResponse<null>);
  }
};
export const getCourseManagementData = async (req: Request, res: Response) => {
  try {
    const page = parseInt(req.query.page as string) || 1;
    const limit = parseInt(req.query.limit as string) || 10;

    const totalCount = await Course.countDocuments();
    const totalPages = Math.ceil(totalCount / limit);
    const skip = (page - 1) * limit;

    const courses = await Course.find()
      .populate('instructors', 'name')
      .skip(skip)
      .limit(limit)
      .lean();

    const responseData: PaginatedResponse<CourseType[]> = {
      success: true,
      data: courses,
      totalCount,
      pageSize: limit,
      currentPage: page,
      totalPages
    };

    res.json(responseData);
  } catch (error) {
    console.error('Error fetching course data:', error);
    res.status(500).json({ success: false, error: 'Error fetching course data' } as ApiResponse<null>);
  }
};

export const createCourse = async (req: Request, res: Response) => {
  try {
    const courseData: CourseData = req.body;
    
    const newCourse = new Course(courseData);
    const savedCourse = await newCourse.save();
    
    res.status(201).json({ 
      success: true, 
      data: savedCourse,
      message: 'Course created successfully'
    } as ApiResponse<CourseType>);
  } catch (error) {
    console.error('Create course error:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Failed to create course',
      message: error instanceof Error ? error.message : 'Unknown error'
    } as ApiResponse<null>);
  }
};

export const updateCourse = async (req: Request, res: Response) => {
  try {
    const courseId = new mongoose.Types.ObjectId(req.params.courseId);
    const updateData: Partial<CourseData> = req.body;

    const course = await Course.findByIdAndUpdate(courseId, updateData, { new: true });
    if (!course) {
      return res.status(404).json({ success: false, error: 'Course not found' } as ApiResponse<null>);
    }
    res.json({ 
      success: true, 
      data: course
    } as ApiResponse<CourseType>);
  } catch (error) {
    console.error('Error updating course:', error);
    res.status(500).json({ success: false, error: 'Server error while updating course' } as ApiResponse<null>);
  }
};

export const deleteCourse = async (req: Request, res: Response) => {
  try {
    const courseId = new mongoose.Types.ObjectId(req.params.courseId);

    const course = await Course.findByIdAndDelete(courseId);
    if (!course) {
      return res.status(404).json({ success: false, error: 'Course not found' } as ApiResponse<null>);
    }

    await User.updateMany(
      { courses: courseId },
      { $pull: { courses: courseId } }
    );

    res.json({ success: true, message: 'Course deleted successfully' } as ApiResponse<null>);
  } catch (error) {
    console.error('Error deleting course:', error);
    res.status(500).json({ success: false, error: 'Server error while deleting course' } as ApiResponse<null>);
  }
};

export const updateCourseStructure = async (req: Request, res: Response) => {
  try {
    const courseId = new mongoose.Types.ObjectId(req.params.courseId);
    const updatedCourseData: CourseType = req.body;

    const updatedCourse = await Course.findByIdAndUpdate(courseId, updatedCourseData, { new: true });

    if (!updatedCourse) {
      return res.status(404).json({ success: false, error: 'Course not found' } as ApiResponse<null>);
    }

    res.json({ 
      success: true, 
      data: updatedCourse,
      message: 'Course structure updated successfully'
    } as ApiResponse<CourseType>);
  } catch (error) {
    console.error('Error updating course structure:', error);
    res.status(500).json({ success: false, error: 'Server error while updating course structure' } as ApiResponse<null>);
  }
};

export const getInstructors = async (req: Request, res: Response) => {
  try {
    const instructors = await User.find({ 'role.name': 'instructor' });
    res.json({ 
      success: true, 
      data: instructors
    } as ApiResponse<UserType[]>);
  } catch (error) {
    console.error('Error fetching instructors:', error);
    res.status(500).json({ success: false, error: 'Server error while fetching instructors' } as ApiResponse<null>);
  }
};

export const getUsersCourse = async (req: Request, res: Response) => {
  try {
    const users = await User.find();
    res.json({ 
      success: true, 
      data: users
    } as ApiResponse<UserType[]>);
  } catch (error) {
    console.error('Error fetching users:', error);
    res.status(500).json({ success: false, error: 'Server error while fetching users' } as ApiResponse<null>);
  }
};

==================================================
Contents of C:\Users\eytan\Desktop\hebrewclubweb\server\src\admin\Controllers\CourseContentController\CourseUserController.ts:
==================================================
// CourseUserController.ts
import { Request, Response } from 'express';
import Course from '../../../models/Course';
import User from '../../../models/User';
import { Course as CourseType, ApiResponse } from '../../../types/models';
import mongoose from 'mongoose';

export const addUserToCourse = async (req: Request, res: Response) => {
  try {
    const courseId = new mongoose.Types.ObjectId(req.params.courseId);
    const userId = new mongoose.Types.ObjectId(req.body.userId);
    const course = await Course.findById(courseId);
    const user = await User.findById(userId);

    if (!course || !user) {
      return res.status(404).json({ success: false, error: 'Course or user not found' } as ApiResponse<null>);
    }

    if (!course.users.includes(userId)) {
      course.users.push(userId);
      await course.save();
    }

    if (!user.courses.includes(courseId)) {
      user.courses.push(courseId);
      await user.save();
    }

    res.json({ 
      success: true, 
      data: course,
      message: 'User added to course successfully'
    } as ApiResponse<CourseType>);
  } catch (error) {
    console.error('Error adding user to course:', error);
    res.status(500).json({ success: false, error: 'Server error' } as ApiResponse<null>);
  }
};

export const removeUserFromCourse = async (req: Request, res: Response) => {
  try {
    const courseId = new mongoose.Types.ObjectId(req.params.courseId);
    const userId = new mongoose.Types.ObjectId(req.body.userId);
    const course = await Course.findById(courseId);
    const user = await User.findById(userId);

    if (!course || !user) {
      return res.status(404).json({ success: false, error: 'Course or user not found' } as ApiResponse<null>);
    }

    course.users = course.users.filter((id) => !id.equals(userId));
    await course.save();

    user.courses = user.courses.filter((id) => !id.equals(courseId));
    await user.save();

    res.json({ 
      success: true, 
      data: course,
      message: 'User removed from course successfully'
    } as ApiResponse<CourseType>);
  } catch (error) {
    console.error('Error removing user from course:', error);
    res.status(500).json({ success: false, error: 'Server error' } as ApiResponse<null>);
  }
};


==================================================
Contents of C:\Users\eytan\Desktop\hebrewclubweb\server\src\admin\Controllers\CourseContentController\LessonController.ts:
==================================================
import { Request, Response } from 'express';
import Section from '../../../models/Section';
import Lesson from '../../../models/Lesson';
import { Lesson as LessonType, LessonData, ApiResponse } from '../../../types/models';
import mongoose from 'mongoose';

export const createLesson = async (req: Request, res: Response) => {
  try {
    const sectionId = new mongoose.Types.ObjectId(req.params.sectionId);
    const lessonData: LessonData = req.body;

    const section = await Section.findById(sectionId);
    if (!section) {
      return res.status(404).json({ success: false, error: 'Section not found' } as ApiResponse<null>);
    }

    const newLesson = new Lesson({
      ...lessonData,
      sectionId: sectionId
    });

    const savedLesson = await newLesson.save();

    await Section.findByIdAndUpdate(
      sectionId,
      { $push: { lessons: savedLesson._id } }
    );

    res.status(201).json({ 
      success: true, 
      data: savedLesson,
      message: 'Lesson added to section successfully'
    } as ApiResponse<LessonType>);
  } catch (error) {
    console.error('Error in createLesson:', error);
    res.status(500).json({ success: false, error: 'Server error while adding lesson to section' } as ApiResponse<null>);
  }
};

export const getLesson = async (req: Request, res: Response) => {
  try {
    const lessonId = new mongoose.Types.ObjectId(req.params.id);
    const lesson = await Lesson.findById(lessonId).populate('contentItems');
    if (!lesson) {
      return res.status(404).json({ success: false, error: 'Lesson not found' } as ApiResponse<null>);
    }
    res.json({ success: true, data: lesson } as ApiResponse<LessonType>);
  } catch (error) {
    console.error('Error fetching lesson:', error);
    res.status(500).json({ success: false, error: 'Server error while fetching lesson' } as ApiResponse<null>);
  }
};

export const updateLesson = async (req: Request, res: Response) => {
  try {
    const lessonId = new mongoose.Types.ObjectId(req.params.id);
    const updateData: Partial<LessonData> = req.body;

    const lesson = await Lesson.findByIdAndUpdate(lessonId, updateData, { new: true });
    if (!lesson) {
      return res.status(404).json({ success: false, error: 'Lesson not found' } as ApiResponse<null>);
    }
    res.json({ 
      success: true, 
      data: lesson
    } as ApiResponse<LessonType>);
  } catch (error) {
    console.error('Error updating lesson:', error);
    res.status(500).json({ success: false, error: 'Server error while updating lesson' } as ApiResponse<null>);
  }
};

export const deleteLesson = async (req: Request, res: Response) => {
  try {
    const lessonId = new mongoose.Types.ObjectId(req.params.id);

    const lesson = await Lesson.findByIdAndDelete(lessonId);
    if (!lesson) {
      return res.status(404).json({ success: false, error: 'Lesson not found' } as ApiResponse<null>);
    }

    await Section.findByIdAndUpdate(
      lesson.sectionId,
      { $pull: { lessons: lessonId } }
    );

    res.json({ success: true, message: 'Lesson deleted successfully' } as ApiResponse<null>);
  } catch (error) {
    console.error('Error deleting lesson:', error);
    res.status(500).json({ success: false, error: 'Server error while deleting lesson' } as ApiResponse<null>);
  }
};

export const getLessons = async (req: Request, res: Response) => {
  try {
    console.log('Received query:', req.query);  // Log the received query for debugging

    let sectionIds: string[];

    // Check if sectionIds is an array or a single value
    if (Array.isArray(req.query.sectionIds)) {
      sectionIds = req.query.sectionIds as string[];
    } else if (typeof req.query.sectionIds === 'string') {
      sectionIds = [req.query.sectionIds];
    } else {
      return res.status(400).json({ success: false, error: 'Invalid sectionIds parameter' } as ApiResponse<null>);
    }

    console.log('Processed sectionIds:', sectionIds);  // Log the processed sectionIds

    // Validate and convert each sectionId to ObjectId
    const objectIdSectionIds = sectionIds.map(id => {
      if (!mongoose.Types.ObjectId.isValid(id)) {
        throw new Error(`Invalid section ID: ${id}`);
      }
      return new mongoose.Types.ObjectId(id);
    });

    const lessons = await Lesson.find({ sectionId: { $in: objectIdSectionIds } }).populate('contentItems');
    
    console.log(`Found ${lessons.length} lessons`);  // Log the number of lessons found

    res.json({ 
      success: true, 
      data: lessons
    } as ApiResponse<LessonType[]>);
  } catch (error) {
    console.error('Error fetching lessons:', error);
    res.status(500).json({ success: false, error: 'Server error while fetching lessons' } as ApiResponse<null>);
  }
};

==================================================
Contents of C:\Users\eytan\Desktop\hebrewclubweb\server\src\admin\Controllers\CourseContentController\SectionController.ts:
==================================================
import { Request, Response } from 'express';
import Course from '../../../models/Course';
import Section from '../../../models/Section';
import { Section as SectionType, SectionData, ApiResponse } from '../../../types/models';
import mongoose from 'mongoose';

export const createSection = async (req: Request, res: Response) => {
  try {
    const courseId = new mongoose.Types.ObjectId(req.params.courseId);
    const sectionData: SectionData = req.body;

    const course = await Course.findById(courseId);
    if (!course) {
      return res.status(404).json({ success: false, error: 'Course not found' } as ApiResponse<null>);
    }

    const newSection = new Section({
      ...sectionData,
      courseId: courseId
    });

    const savedSection = await newSection.save();
    
    await Course.findByIdAndUpdate(courseId, { $push: { sections: savedSection._id } });

    res.status(201).json({ 
      success: true, 
      data: savedSection,
      message: 'Section added to course successfully'
    } as ApiResponse<SectionType>);
  } catch (error) {
    console.error('Error adding section to course:', error);
    res.status(500).json({ success: false, error: 'Server error while adding section to course' } as ApiResponse<null>);
  }
};

export const getSection = async (req: Request, res: Response) => {
  try {
    const sectionId = new mongoose.Types.ObjectId(req.params.id);
    const section = await Section.findById(sectionId).populate('lessons');
    if (!section) {
      return res.status(404).json({ success: false, error: 'Section not found' } as ApiResponse<null>);
    }
    res.json({ success: true, data: section } as ApiResponse<SectionType>);
  } catch (error) {
    console.error('Error fetching section:', error);
    res.status(500).json({ success: false, error: 'Server error while fetching section' } as ApiResponse<null>);
  }
};

export const updateSection = async (req: Request, res: Response) => {
  try {
    const sectionId = new mongoose.Types.ObjectId(req.params.id);
    const updateData: Partial<SectionData> = req.body;

    const section = await Section.findByIdAndUpdate(sectionId, updateData, { new: true });
    if (!section) {
      return res.status(404).json({ success: false, error: 'Section not found' } as ApiResponse<null>);
    }
    res.json({ 
      success: true, 
      data: section
    } as ApiResponse<SectionType>);
  } catch (error) {
    console.error('Error updating section:', error);
    res.status(500).json({ success: false, error: 'Server error while updating section' } as ApiResponse<null>);
  }
};

export const deleteSection = async (req: Request, res: Response) => {
  try {
    const sectionId = new mongoose.Types.ObjectId(req.params.id);

    const section = await Section.findByIdAndDelete(sectionId);
    if (!section) {
      return res.status(404).json({ success: false, error: 'Section not found' } as ApiResponse<null>);
    }

    await Course.findByIdAndUpdate(
      section.courseId,
      { $pull: { sections: sectionId } }
    );

    res.json({ success: true, message: 'Section deleted successfully' } as ApiResponse<null>);
  } catch (error) {
    console.error('Error deleting section:', error);
    res.status(500).json({ success: false, error: 'Server error while deleting section' } as ApiResponse<null>);
  }
};

export const getSections = async (req: Request, res: Response) => {
  try {
    const courseId = new mongoose.Types.ObjectId(req.params.courseId);
    const sections = await Section.find({ courseId }).populate('lessons');
    
    res.json({ 
      success: true, 
      data: sections
    } as ApiResponse<SectionType[]>);
  } catch (error) {
    console.error('Error fetching sections:', error);
    res.status(500).json({ success: false, error: 'Server error while fetching sections' } as ApiResponse<null>);
  }
};
